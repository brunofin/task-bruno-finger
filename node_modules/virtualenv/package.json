{
  "name": "virtualenv",
  "version": "0.2.3",
  "description": "install and use Python dependencies in node with virtualenv",
  "keywords": [
    "python",
    "virtualenv",
    "rpc"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mjpizz/node-virtualenv.git"
  },
  "main": "./lib/virtualenv.js",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "request": "2.x",
    "rimraf": "2.x",
    "glob": "3.x",
    "tar": "0.x",
    "coffee-script": "1.7.x",
    "pypi": "0.x",
    "semver": "2.x"
  },
  "bin": {
    "virtualenv-postinstall": "./bin/postinstall"
  },
  "license": "MIT",
  "author": {
    "name": "Matt Pizzimenti",
    "url": "http://mjpizz.com"
  },
  "readme": "## node-virtualenv\n\nnode-virtualenv enables Python dependencies in your node projects,\nwithout cluttering up the system environment.\n\nFor example, let's add Skype4Py as a dependency to a project. In the\n**package.json**, add 2 things:\n\n1. Dependency on `virtualenv` (this library)\n2. [Postinstall](https://npmjs.org/doc/scripts.html) to prepare the virtualenv\n   every time your module is npm installed.\n\n```json\n{\n  \"dependencies\": {\n    \"virtualenv\": \"*\"\n  },\n  \"scripts\": {\n    \"postinstall\": \"virtualenv-postinstall\"\n  },\n}\n```\n\nNext, make a [requirements.txt](http://www.pip-installer.org/en/latest/cookbook.html#requirements-files)\nin the same directory as package.json, containing this line:\n\n```\nSkype4Py==1.0.35\n```\n\nWhen you run `npm install`, the Skype4Py dependency will be isolated\nin a virtualenv located under **.node-virtualenv**.\n\nNext, spawn your isolated Python virtualenv from node:\n\n```javascript\nvar virtualenv = require(\"virtualenv\");\nvar packagePath = require.resolve(\"./package.json\")\nvar env = virtualenv(packagePath);\n\n// This is a child_process running Python using your virtualenv. You can\n// communicate with it over stdin/stdout, etc.\nvar child = env.spawnPython([\"./my_python_helper.py\"]);\n```\n\nYou can also `spawn` any of the other commands in the virtualenv. For example,\nif you added a Python tool like [fabric](http://docs.fabfile.org/en/1.8/) as\na dependency, you can access the command `fab` that it installs:\n\n```javascript\nvar virtualenv = require(\"virtualenv\");\nvar packagePath = require.resolve(\"./package.json\")\nvar env = virtualenv(packagePath);\n\n// This is a child_process running fabric using your virtualenv.\nvar child = env.spawn(\"fab\", [\"deploy\", \"-H\", \"example1.net,example2.net\"]);\n```\n\n## Advanced usage\n\nYou can modify the way the virtualenv is created during postinstall.\nFor example, if your node module still functions without the Python extras,\nyou can make virtualenv optional (in case the user doesn't have Python). Do\nthis by adding a \"virtualenv\" key to your package.json:\n\n```javascript\n  \"virtualenv\": {\n    \"optional\": true\n  }\n```\n\nDepend on a specific version of virtualenv:\n\n```javascript\n  \"virtualenv\": {\n    \"version\": \"1.10.x\"\n  }\n```\n\nSend flags to the virtualenv creation command:\n\n```javascript\n  \"virtualenv\": {\n    \"flags\": [\n      \"--system-site-packages\"\n    ]\n  }\n```\n\n## References\n\n* Official [virtualenv documentation](http://www.virtualenv.org/en/latest/)\n* Official [pip documentation](http://www.pip-installer.org/en/latest/index.html)\n* Heroku [pip article](https://devcenter.heroku.com/articles/python-pip)\n\n## Contributing\n\nJust make a pull request :)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mjpizz/node-virtualenv/issues"
  },
  "_id": "virtualenv@0.2.3",
  "dist": {
    "shasum": "6ce8ad7fe0fc0a1ede9a9783b0c089bd632f7b77"
  },
  "_from": "virtualenv@0.2.3",
  "_resolved": "https://registry.npmjs.org/virtualenv/-/virtualenv-0.2.3.tgz"
}
