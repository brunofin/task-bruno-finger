{
  "name": "pypi",
  "description": "Client for XMLRPC Python Package Index",
  "keywords": [
    "python pypi xmlrpc client"
  ],
  "author": {
    "name": "Lukasz Balcerzak"
  },
  "version": "0.1.2",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/lukaszb/pypi/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.4.0"
  },
  "directories": {
    "lib": "./lib/pypi"
  },
  "main": "./index",
  "homepage": "https://github.com/lukaszb/pypi",
  "repository": {
    "type": "git",
    "url": "git://github.com/lukaszb/pypi.git"
  },
  "dependencies": {
    "coffee-script": ">=1.1.1",
    "xmlrpc": ">=0.8.1"
  },
  "devDependencies": {
    "underscore": ">=1.2.1",
    "jasmine-node": ">=1.0.12"
  },
  "readme": "PyPI Client for Node.js\n=======================\n\n``pypi`` is a simple client which can talk with `Python Package Index`_.\n\n\nExample\n-------\n\nFire up ``coffee`` console and run::\n\n    coffee> pypi = require 'pypi'\n    coffee> client = new pypi.Client\n    coffee> client.getPackageReleases \"Django\", (versions) -> console.log versions\n    coffee> [ '1.3.1', '1.3', '1.2.7', '1.2.6', '1.2.5', '1.2.4', '1.2.3', '1.2.2', '1.2.1', '1.2', '1.1.4', '1.1.3', '1.1.2', '1.0.4' ]\n\n\nOverview\n--------\n\nBasically, ``Client`` objects talk with `xmlrpc PyPI interface`_ and runs\n*callbacks* once server responses. Additionally, if underlying xmlrpc_ client\nwould return *error*, *onError* callback would be called (if passed) with\nreturned *error* as parameter.\n\n\npypi.Client API\n---------------\n\ncallXmlrpc: (method, args, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is low level client's method to use underlying xmlrpc_ library to talk\nwith *PyPI* server. It accepts ``method`` paramter, list of arguments (``args``)\nand *callback* that should be run with responded result or *onError* which\nwould be called in case of any error.\n\n\ngetPackageReleases (package, callback, onError, showHidden=false)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of versions that are registered at PyPI_. If\n``showHidden`` is set to ``true``, hidden versions would be included in\nthe response.\n\ngetPackagesList (callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of **ALL** packages registered at PyPI_.\n\ngetPackageRoles (package, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of 2 elements lists (role, username). In example::\n\n    coffee> client.getPackageRoles \"Django\", (roles) -> console.log roles\n    coffee> [ [ 'Owner', 'ubernostrum' ], [ 'Owner', 'jacobian' ] ]\n\nRoles may be one of ``Owner`` or ``Maintainer``.\n\ngetUserPackages (username, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of 2 elements lists (role, packageName). In\nexample::\n\n    coffee> client.getUserPackages \"ubernostrum\", (packages) -> console.log packages\n    coffee> [ [ 'Owner', 'webcolors' ], [ 'Owner', 'pownce-api' ], [ 'Owner', 'django-registration' ], [ 'Owner', 'django-profiles' ], [ 'Owner', 'django-flashpolicies' ], [ 'Owner', 'Django' ], [ 'Owner', 'django-funserver' ] ]\n\n\ngetReleaseData (package, version, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive dictionary with following keys:\n\n- name\n- version\n- stable_version\n- author\n- author_email\n- maintainer\n- maintainer_email\n- home_page\n- license\n- summary\n- description\n- keywords\n- platform\n- download_url\n- classifiers (list of classifier strings)\n- requires\n- requires_dist\n- provides\n- provides_dist\n- requires_external\n- requires_python\n- obsoletes\n- obsoletes_dist\n- project_url\n\nExample::\n\n    coffee> client.getReleaseData \"vcs\", (val) -> console.log val\n    coffee> client.getReleaseData \"vcs\", \"0.2.2\", (data) -> console.log data\n    coffee> { maintainer: null,\n      requires_python: null,\n      maintainer_email: null,\n      cheesecake_code_kwalitee_id: null,\n      keywords: null,\n      package_url: 'http://pypi.python.org/pypi/vcs',\n      author: 'Marcin Kuzminski, Lukasz Balcerzak',\n      author_email: 'marcin@python-works.com',\n      download_url: 'UNKNOWN',\n      platform: 'UNKNOWN',\n      version: '0.2.2',\n      cheesecake_documentation_id: null,\n      _pypi_hidden: false,\n      description: '===\\nVCS\\n===\\n\\nvarious version control system management abstraction layer for python.\\n\\n------------\\nIntroduction\\n------------\\n\\n``vcs`` is abstraction layer over various version control systems. It is\\ndesigned as feature-rich Python_ library with clean *API*.\\n\\nvcs uses `Semantic Versioning <http://semver.org/>`_\\n\\n**Features**\\n\\n- Common *API* for SCM backends\\n- Fetching repositories data lazily\\n- Simple caching mechanism so we don\\'t hit repo too often\\n\\n**Incoming**\\n\\n- Simple commit api\\n- Smart and powerfull in memory Workdirs\\n\\n-------------\\nDocumentation\\n-------------\\n\\nOnline documentation for development version is available at\\nhttp://packages.python.org/vcs/.\\n\\nYou may also build documentation for yourself - go into ``docs/`` and run::\\n\\n   make html\\n\\n.. _python: http://www.python.org/\\n.. _Sphinx: http://sphinx.pocoo.org/\\n.. _mercurial: http://mercurial.selenic.com/\\n.. _git: http://git-scm.com/',\n      release_url: 'http://pypi.python.org/pypi/vcs/0.2.2',\n      _pypi_ordering: 115,\n      classifiers: [ 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'License :: OSI Approved :: MIT License', 'Operating System :: OS Independent', 'Programming Language :: Python' ],\n      bugtrack_url: null,\n      name: 'vcs',\n      license: 'UNKNOWN',\n      summary: 'vcs\\n    ~~~\\n\\n    Various version Control System (vcs) management abstraction layer for\\n    Python.\\n\\n    :created_on: Apr 8, 2010\\n    :copyright: (c) 2010-2011 by Marcin Kuzminski, Lukasz Balcerzak.',\n      home_page: 'https://github.com/codeinn/vcs',\n      stable_version: null,\n      cheesecake_installability_id: null }\n\n\ngetReleaseDownloads (package, version, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of 2 elements lists (filename, downloads count).\nExample::\n\n    coffee> client.getReleaseDownloads \"Django\", \"1.3.1\", (data) -> console.log data\n    coffee> [ [ 'Django-1.3.1.tar.gz', 59412 ] ]\n\n\n\ngetReleaseUrls (package, version, callback, onError)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCallback would receive list of objects and each of those objects would have\nfollowing keys:\n\n- url\n- packagetype ('sdist', 'bdist', etc)\n- filename\n- size\n- md5_digest\n- downloads\n- has_sig\n- python_version (required version, or 'source', or 'any')\n- comment_text\n\nExample::\n\n    coffee> client.getReleaseUrls \"Django\", \"1.3.1\", (urls) -> console.log urls\n    coffee> [ { has_sig: false,\n        upload_time: Sat, 10 Sep 2011 01:36:21 GMT,\n        comment_text: '',\n        python_version: 'source',\n        url: 'http://pypi.python.org/packages/source/D/Django/Django-1.3.1.tar.gz',\n        md5_digest: '62d8642fd06b9a0bf8544178f8500767',\n        downloads: 59412,\n        filename: 'Django-1.3.1.tar.gz',\n        packagetype: 'sdist',\n        size: 6514564 } ]\n\n\nUsage examples\n--------------\n\nThis snippet would print total number of downloads for a *Django* package::\n\n    _    = require 'underscore'\n    pypi = require 'pypi'\n\n\n    sum = (numbers) -> _.reduce(numbers, (memo, num) ->\n        memo + num\n    , 0)\n\n    showTotalDownloads = (package) ->\n        client = new pypi.Client\n        totalDownloads = 0\n        client.getPackageReleases package, (versions) ->\n            todo = versions.length\n            onDone = ->\n                console.log \"Package #{package} was downloaded for #{totalDownloads} times.\"\n                \n            _.each versions, (version) ->\n                client.getReleaseDownloads package, version, (downloads) ->\n                    downloadCounts = (row[1] for row in downloads)\n                    totalDownloads += sum(downloadCounts)\n                    todo -= 1\n                    if todo == 0\n                        onDone()\n\n    showTotalDownloads \"Django\"\n\n\n.. _`Python Package Index`: http://pypi.python.org/pypi/\n.. _`PyPI`: http://pypi.python.org/pypi/\n.. _`xmlrpc PyPI interface`: http://wiki.python.org/moin/PyPiXmlRpc\n.. _xmlrpc: https://github.com/baalexander/node-xmlrpc\n\n",
  "readmeFilename": "README.rst",
  "bugs": {
    "url": "https://github.com/lukaszb/pypi/issues"
  },
  "_id": "pypi@0.1.2",
  "dist": {
    "shasum": "bb4f9e3a1a524071911c15ab8a6dfd94e02ccc82"
  },
  "_from": "pypi@0.x",
  "_resolved": "https://registry.npmjs.org/pypi/-/pypi-0.1.2.tgz"
}
